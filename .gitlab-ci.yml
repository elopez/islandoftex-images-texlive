variables:
  DOCKER_DRIVER: overlay2
  RELEASE_IMAGE: registry.gitlab.com/islandoftex/images/texlive
  DOCKER_HUB_IMAGE: texlive/texlive
stages:
  - baseimage
  - iso
  - build
  - test

.buildtemplate:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - if [ ! -z "$PUSH_TO_GITLAB" ]; then docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com; fi
    - if [ ! -z "$PUSH_TO_DOCKER_HUB" ]; then docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD; fi
    - docker info
  # allow 1 retry for all builds (GitLab's maximum is 2)
  retry: 1

.testtemplate:
  stage: test
  script:
    - arara -l -v test.tex
    - mtxrun --generate && context test.mkiv

build:baseimage:
  stage: baseimage
  extends: .buildtemplate
  script:
    - docker build --force-rm --no-cache -f Dockerfile.base --tag $RELEASE_IMAGE:base .
    - if [ ! -z "$PUSH_TO_GITLAB" ]; then docker push $RELEASE_IMAGE:base; fi
  rules:
    - if: '$SKIPBASEIMAGE != "true"'

# from https://aquasecurity.github.io/trivy/v0.21.0/advanced/integrations/gitlab-ci/
.container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  needs: ["build:baseimage"]
  stage: test
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy --download-db-only --no-progress --cache-dir .trivycache/
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$RELEASE_IMAGE"
    # Prints full report
    - time trivy --exit-code 0 --cache-dir .trivycache/ --no-progress "$RELEASE_IMAGE"
    # Fail on critical vulnerabilities
    - time trivy --exit-code 1 --cache-dir .trivycache/ --severity CRITICAL --no-progress "$RELEASE_IMAGE"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report.json

.latestruletemplate:
  rules:
    - if: '$LATESTRELEASES == "true"'

.latesttemplate:
  extends: [.buildtemplate, .latestruletemplate]
  stage: build
  script:
    - apk add --no-cache curl sed
    - SUFFIX="`if [ "$DOCFILES" = "yes" ]; then echo "-doc"; fi`"
    - SUFFIX="$SUFFIX`if [ "$SRCFILES" = "yes" ]; then echo "-src"; fi`"
    - IMAGEDATE="`date +%Y-%m-%d`"
    - IMAGETAG="TL$CURRENTRELEASE-$IMAGEDATE$SUFFIX"
    - IMAGETAG="TL$CURRENTRELEASE-`date +%Y-%m-%d-%H-%M`$SUFFIX"
    - docker build --force-rm --no-cache -f Dockerfile.latest --tag $RELEASE_IMAGE:$IMAGETAG --tag $RELEASE_IMAGE:latest$SUFFIX --tag $DOCKER_HUB_IMAGE:latest$SUFFIX --build-arg DOCFILES=$DOCFILES --build-arg SRCFILES=$SRCFILES .
    - if [ ! -z "$PUSH_TO_GITLAB" ]; then docker push $RELEASE_IMAGE:$IMAGETAG; fi
    - if [ ! -z "$PUSH_TO_GITLAB" ]; then docker push $RELEASE_IMAGE:latest$SUFFIX; fi
    - if [ ! -z "$PUSH_TO_DOCKER_HUB" ]; then docker push $DOCKER_HUB_IMAGE:latest$SUFFIX; fi
    - curl "https://img.shields.io/badge/latest-TL$CURRENTRELEASE--`echo $IMAGEDATE | sed 's/-/--/g'`-blue" -o latest.svg
  artifacts:
    expire_in: 4 weeks
    paths:
      - latest.svg

.isotemplate:
  extends: .buildtemplate
  stage: iso
  script:
    - IMAGETAG="TL$CURRENTRELEASE-historic-iso"
    - if [ -z "$ISONAME" ]; then export ISONAME=texlive.iso; fi
    - docker build --force-rm --no-cache -f Dockerfile.iso --tag $RELEASE_IMAGE:$IMAGETAG --build-arg CURRENTRELEASE=$CURRENTRELEASE --build-arg ISONAME=$ISONAME .
    - if [ ! -z "$PUSH_TO_GITLAB" ]; then docker push $RELEASE_IMAGE:$IMAGETAG; fi

.historictemplate:
  extends: .buildtemplate
  stage: build
  script:
    - SUFFIX="`if [ "$DOCFILES" = "yes" ]; then echo "-doc"; fi`"
    - SUFFIX="$SUFFIX`if [ "$SRCFILES" = "yes" ]; then echo "-src"; fi`"
    - IMAGETAG="TL$CURRENTRELEASE-historic$SUFFIX"
    - docker build --force-rm --no-cache -f Dockerfile.historic --tag $RELEASE_IMAGE:$IMAGETAG --tag $DOCKER_HUB_IMAGE:$IMAGETAG --build-arg CURRENTRELEASE=$CURRENTRELEASE --build-arg DOCFILES=$DOCFILES --build-arg SRCFILES=$SRCFILES .
    - if [ ! -z "$PUSH_TO_GITLAB" ]; then docker push $RELEASE_IMAGE:$IMAGETAG; fi
    - if [ ! -z "$PUSH_TO_DOCKER_HUB" ]; then docker push $DOCKER_HUB_IMAGE:$IMAGETAG; fi

# build the latest image
build:latest:
  extends: .latesttemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2022]
        DOCFILES: ["yes", "no"]
        SRCFILES: ["yes", "no"]
test:latest:
  image: $RELEASE_IMAGE:latest
  needs: ["build:latest"]
  extends: [.testtemplate, .latestruletemplate]

# NOTE: historic images have to be built in batches (because the server has a rate
#       limit which we should obey to get the CI passing)
# build historic images between 2018 and 2021 (inclusive)
# this is batch ii (two)
build:iso:18to21:
  extends: .isotemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2018, 2019, 2020, 2021]
        ISOBUILD: "true" # this is a dummy parameter to make the matrix run the list
  rules:
    - if: '$HISTORICALBATCHII == "true"'
build:historic:18to21:
  extends: .historictemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2018, 2019, 2020, 2021]
        DOCFILES: ["yes", "no"]
        SRCFILES: ["yes", "no"]
  rules:
    - if: '$HISTORICALBATCHII == "true"'
test:historic:18to21:
  image: $RELEASE_IMAGE:TL$CURRENTRELEASE-historic
  extends: .testtemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2018, 2019, 2020, 2021]
        TESTBUILD: "true" # this is a dummy parameter to make the matrix run the list
  rules:
    - if: '$HISTORICALBATCHII == "true"'
      when: always
    - when: never

# build historic images between 2014 and 2017 (inclusive)
# this is batch i (one)
build:iso:14to17:
  extends: .isotemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2014, 2015, 2016, 2017]
        ISOBUILD: "true" # this is a dummy parameter to make the matrix run the list
  rules:
    - if: '$HISTORICALBATCHI == "true"'
      when: always
    - when: never
build:historic:14to17:
  extends: .historictemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2014, 2015, 2016, 2017]
        DOCFILES: ["yes", "no"]
        SRCFILES: ["yes", "no"]
  rules:
    - if: '$HISTORICALBATCHI == "true"'
      when: always
    - when: never
test:historic:14to17:
  image: $RELEASE_IMAGE:TL$CURRENTRELEASE-historic
  extends: .testtemplate
  parallel:
    matrix:
      - CURRENTRELEASE: [2014, 2015, 2016, 2017]
        TESTBUILD: "true" # this is a dummy parameter to make the matrix run the list
  rules:
    - if: '$HISTORICALBATCHI == "true"'

# currently, we do not build these but 2008â€“2013 require us to set the ISONAME
# so this is included as an example
.build:prehistoric-iso:
  extends: .isotemplate
  variables:
    ISONAME: texlive$CURRENTRELEASE.iso
  parallel:
    matrix:
      - CURRENTRELEASE: [2008, 2009, 2010, 2011, 2012, 2013]
        ISOBUILD: "true" # this is a dummy parameter to make the matrix run the list
